<?php 	$root = $_SERVER['DOCUMENT_ROOT']."/manager";	require_once($root."/resources/routes/route_setup.php");
		$app->map("(/:id)", function ($id = false) use ($app, $hdb, $ERROR_MSG) {
		$pretty = $app->request->params('pretty'); // output the json pretty or not
				if (@$id !== "all") {
			switch ($app->request->getMethod()) {							case "POST" : // this will be used for file uploads only									if (isAdmin()) {											echo "post";					}					else {											echo $ERROR_MSG["Not Admin"];					}				break;								case "PUT" : // this will be used for updating all records										if (isAdmin()) {					}					else {											echo $ERROR_MSG["Not Admin"];					}									break;								case "GET" : 												echo "get";				break;								case "DELETE" : 										if (isAdmin()) {																}					else {											echo $ERROR_MSG["Not Admin"];					}									break;			}		}		else {						$userbase = $hdb->userbase()->select("*");						if (@$pretty) {							echo "<pre>";				echo json_encode($userbase, JSON_PRETTY_PRINT | JSON_HEX_QUOT);				echo "</pre>";			}			else echo json_encode($userbase, JSON_HEX_QUOT);		}			})->via("POST", "PUT", "GET", "DELETE");		$app->run();	function strtohex($x) 			{				$s='';				foreach (str_split($x) as $c) $s.=sprintf("%02X",ord($c));				return($s);			} 	/**		Checks to make sure the file is where it is supposed to be.	*/	function checkFile ($id, $ext, $locked) {			$path = "/var/www/auto/manspec/";				$folders = array("files/", "files/locked/");		$file = $path.$folders[$locked].$id.".".$ext;				// if the file is where it is supposed to be		if (file_exists($file)) return true;		else {					// if it was not found, check the other folder			if (@$locked) $locked = 0;			else $locked = 1;					// get the old file path			$old_file = $path.$folders[$locked].$id.".".$ext;					// if we found the old file in the other folder move it to the correct folder			if (file_exists($old_file)) rename($old_file, $file);			else return false;		}	}		/**		This will delete a file based on id.	*/	function deleteFilesByID ($id) {			$path = "/var/www/auto/manspec/";								$folders = array("files/", "files/locked/");				$success = false;				foreach ($folders as $folder) {					// get the logo file type			if ($handle = opendir($path.$folder)) {							while (false !== ($entry = readdir($handle))) {										if (!is_dir($path.$entry)) {											$exEntry = explode(".", $entry);												// delete the old logo, if there is one						if ($id === $exEntry[0]) {													if (unlink($path.$folder.$entry)) $success = true;						}					}				}				closedir($handle);			}		}				return $success;	}		/**		This will determine if the user is an admin at all.	*/	function isAdmin () {			global $admin_list, $super_admin_list;			if (in_array($_SESSION['login'], $admin_list) || in_array($_SESSION['login'], $super_admin_list)) {					return true;		}		else return false;	}		function generateUUID() {	   // The field names refer to RFC 4122 section 4.1.2	   return sprintf('%04x%04x-%04x-%03x4-%04x-%04x%04x%04x',		   mt_rand(0, 65535), mt_rand(0, 65535), // 32 bits for "time_low"		   mt_rand(0, 65535), // 16 bits for "time_mid"		   mt_rand(0, 4095),  // 12 bits before the 0100 of (version) 4 for "time_hi_and_version"		   bindec(substr_replace(sprintf('%016b', mt_rand(0, 65535)), '01', 6, 2)),			   // 8 bits, the last two of which (positions 6 and 7) are 01, for "clk_seq_hi_res"			   // (hence, the 2nd hex digit after the 3rd hyphen can only be 1, 5, 9 or d)			   // 8 bits for "clk_seq_low"		   mt_rand(0, 65535), mt_rand(0, 65535), mt_rand(0, 65535) // 48 bits for "node"	   );	}		function outputArray ($array) {				echo "<pre>";		print_r($array);		echo "</pre>";	}?>